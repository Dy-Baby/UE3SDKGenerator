#pragma once
#include <string>

/*
# ========================================================================================= #
# Pieces Of Code																			#
# ========================================================================================= #
*/

std::string TArray_Iterator =
"template<typename TArray>\n"
"struct TIterator\n"
"{\n"
"public:\n"
"\tusing ElementType = typename TArray::ElementType;\n"
"\tusing ElementPointer = ElementType*;\n"
"\tusing ElementReference = ElementType&;\n"
"\tusing ElementConstReference = const ElementType&;\n"
"\n"
"private:\n"
"\tElementPointer IteratorData;\n"
"\n"
"public:\n"
"\tTIterator(ElementPointer inElementPointer)\n"
"\t{\n"
"\t\tIteratorData = inElementPointer;\n"
"\t}\n"
"\n"
"public:\n"
"\tTIterator& operator++()\n"
"\t{\n"
"\t\tIteratorData++;\n"
"\t\treturn *this;\n"
"\t}\n"
"\n"
"\tTIterator operator++(int32_t)\n"
"\t{\n"
"\t\tTIterator iteratorCopy = *this;\n"
"\t\t++(*this);\n"
"\t\treturn iteratorCopy;\n"
"\t}\n"
"\n"
"\tTIterator& operator--()\n"
"\t{\n"
"\t\tIteratorData--;\n"
"\t\treturn *this;\n"
"\t}\n"
"\n"
"\tTIterator operator--(int32_t)\n"
"\t{\n"
"\t\tTIterator iteratorCopy = *this;\n"
"\t\t--(*this);\n"
"\t\treturn iteratorCopy;\n"
"\t}\n"
"\n"
"\tElementReference operator[](int32_t index)\n"
"\t{\n"
"\t\treturn *(IteratorData[index]);\n"
"\t}\n"
"\n"
"\tElementPointer operator->()\n"
"\t{\n"
"\t\treturn IteratorData;\n"
"\t}\n"
"\n"
"\tElementReference operator*()\n"
"\t{\n"
"\t\treturn *IteratorData;\n"
"\t}\n"
"\n"
"\tbool operator==(const TIterator& other) const\n"
"\t{\n"
"\t\treturn (IteratorData == other.IteratorData);\n"
"\t}\n"
"\n"
"\tbool operator!=(const TIterator& other) const\n"
"\t{\n"
"\t\treturn !(*this == other);\n"
"\t}\n"
"};\n\n";

std::string TArray_Struct =
"template<typename InElementType>\n"
"struct TArray\n"
"{\n"
"public:\n"
"\tusing ElementType = InElementType;\n"
"\tusing ElementPointer = ElementType*;\n"
"\tusing ElementReference = ElementType&;\n"
"\tusing ElementConstReference = const ElementType&;\n"
"\tusing Iterator = TIterator<TArray<ElementType>>;\n"
"\n"
"private:\n"
"\tElementPointer ArrayData;\n"
"\tint32_t ArrayCount;\n"
"\tint32_t ArrayMax;\n"
"\n"
"public:\n"
"\tTArray()\n"
"\t{\n"
"\t\tArrayData = nullptr;\n"
"\t\tArrayCount = 0;\n"
"\t\tArrayMax = 0;\n"
"\n"
"\t\t//ReAllocate(sizeof(ElementType));\n"
"\t}\n"
"\n"
"\t~TArray()\n"
"\t{\n"
"\t\t//Clear();\n"
"\t\t//::operator delete(ArrayData, ArrayMax * sizeof(ElementType));\n"
"\t}\n"
"\n"
"public:\n"
"\tElementConstReference operator[](int32_t index) const\n"
"\t{\n"
"\t\tif (index <= ArrayCount)\n"
"\t\t{\n"
"\t\t\treturn ArrayData[index];\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tElementReference operator[](int32_t index)\n"
"\t{\n"
"\t\tif (index <= ArrayCount)\n"
"\t\t{\n"
"\t\t\treturn ArrayData[index];\n"
"\t\t} \n"
"\t}\n"
"\n"
"\tElementConstReference At(const int32_t index) const\n"
"\t{\n"
"\t\tif (index <= ArrayCount)\n"
"\t\t{\n"
"\t\t\treturn ArrayData[index];\n"
"\t\t} \n"
"\t}\n"
"\n"
"\tElementReference At(const int32_t index)\n"
"\t{\n"
"\t\tif (index <= ArrayCount)\n"
"\t\t{\n"
"\t\t\treturn ArrayData[index];\n"
"\t\t} \n"
"\t}\n"
"\n"
"\tvoid Add(ElementConstReference newElement)\n"
"\t{\n"
"\t\tif (ArrayCount >= ArrayMax)\n"
"\t\t{\n"
"\t\t\tReAllocate(sizeof(ElementType) * (ArrayCount + 1));\n"
"\t\t}\n"
"\n"
"\t\tnew(&ArrayData[ArrayCount]) ElementType(newElement);\n"
"\t\tArrayCount++;\n"
"\t}\n"
"\n"
"\tvoid Add(ElementReference& newElement)\n"
"\t{\n"
"\t\tif (ArrayCount >= ArrayMax)\n"
"\t\t{\n"
"\t\t\tReAllocate(sizeof(ElementType) * (ArrayCount + 1));\n"
"\t\t}\n"
"\n"
"\t\tnew(&ArrayData[ArrayCount]) ElementType(newElement);\n"
"\t\tArrayCount++;\n"
"\t}\n"
"\n"
"\tvoid PopBack()\n"
"\t{\n"
"\t\tif (ArrayCount > 0)\n"
"\t\t{\n"
"\t\t\tArrayCount--;\n"
"\t\t\tArrayData[ArrayCount].~ElementType();\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid Clear()\n"
"\t{\n"
"\t\tfor (int32_t i = 0; i < ArrayCount; i++)\n"
"\t\t{\n"
"\t\t\tArrayData[i].~ElementType();\n"
"\t\t}\n"
"\n"
"\t\tArrayCount = 0;\n"
"\t}\n"
"\n"
"\tint32_t Num() const\n"
"\t{\n"
"\t\treturn ArrayCount;\n"
"\t}\n"
"\n"
"\tint32_t Max() const\n"
"\t{\n"
"\t\treturn ArrayMax;\n"
"\t}\n"
"\n"
"\tIterator begin()\n"
"\t{\n"
"\t\treturn Iterator(ArrayData);\n"
"\t}\n"
"\n"
"\tIterator end()\n"
"\t{\n"
"\t\treturn Iterator(ArrayData + ArrayCount);\n"
"\t}\n"
"\n"
"private:\n"
"\tvoid ReAllocate(int32_t newArrayMax)\n"
"\t{\n"
"\t\tElementPointer newArrayData = (ElementPointer)::operator new(newArrayMax * sizeof(ElementType));\n"
"\n"
"\t\tint32_t newNum = ArrayCount;\n"
"\n"
"\t\tif (newArrayMax < newNum)\n"
"\t\t{\n"
"\t\t\tnewNum = newArrayMax;\n"
"\t\t}\n"
"\n"
"\t\tfor (int32_t i = 0; i < newNum; i++)\n"
"\t\t{\n"
"\t\t\tnew(newArrayData + i) ElementType(std::move(ArrayData[i]));\n"
"\t\t}\n"
"\n"
"\t\tfor (int32_t i = 0; i < ArrayCount; i++)\n"
"\t\t{\n"
"\t\t\tArrayData[i].~ElementType();\n"
"\t\t}\n"
"\n"
"\t\t::operator delete(ArrayData, ArrayMax * sizeof(ElementType));\n"
"\t\tArrayData = newArrayData;\n"
"\t\tArrayMax = newArrayMax;\n"
"\t}\n"
"};\n";

std::string FNameEntry_Struct =
"struct FNameEntry\n"
"{\n"
"public:\n"
"\tint64_t\t\t\tFlags;\t\t\t\t\t\t\t\t\t\t// 0x0000 (0x08)\n"
"\tint32_t\t\t\tIndex;\t\t\t\t\t\t\t\t\t\t// 0x0008 (0x04)\n"
"\tuint8_t\t\t\tUnknownData00[0xC];\t\t\t\t\t\t\t// 0x000C (0x0C)\n"
"\twchar_t\t\t\tName[0x400];\t\t\t\t\t\t\t\t// 0x0018 (0x00)\n"
"\n"
"public:\n"
"\tint32_t GetIndex() const\n"
"\t{\n"
"\t\treturn Index;\n"
"\t}\n"
"\n"
"\tstd::string GetName() const\n"
"\t{\n"
"\t\tstd::wstring ws(Name);\n"
"\t\tstd::string str(ws.begin(), ws.end());\n"
"\t\treturn str;\n"
"\t}\n"
"\n"
"\tconst wchar_t* GetWideName() const\n"
"\t{\n"
"\t\treturn Name;\n"
"\t}\n"
"};\n";

std::string FName_Struct =
"struct FName\n"
"{\n"
"public:\n"
"\tusing ElementType = const wchar_t;\n"
"\tusing ElementPointer = ElementType*;\n"
"\n"
"private:\n"
"\tint32_t\tFNameEntryId;\n"
"\tint32_t\tInstanceNumber;\n"
"\n"
"public:\n"
"\tFName()\n"
"\t{\n"
"\t\tFNameEntryId = 0;\n"
"\t\tInstanceNumber = 0;\n"
"\t}\n"
"\n"
"\tFName(int32_t i)\n"
"\t{\n"
"\t\tFNameEntryId = i;\n"
"\t\tInstanceNumber = 0;\n"
"\t}\n"
"\n"
"\tFName(ElementPointer nameToFind)\n"
"\t{\n"
"\t\tstatic std::vector<int32_t> nameCache{};\n"
"\n"
"\t\tFNameEntryId = 0;\n"
"\t\tInstanceNumber = 0;\n"
"\n"
"\t\tfor (int32_t name : nameCache)\n"
"\t\t{\n"
"\t\t\tif (Names()->At(name))\n"
"\t\t\t{\n"
"\t\t\t\tif (!wcscmp(Names()->At(nameCache[name])->Name, nameToFind))\n"
"\t\t\t\t{\n"
"\t\t\t\t\tFNameEntryId = nameCache[name];\n"
"\t\t\t\t\treturn;\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t}\n"
"\n"
"\t\tfor (int i = 0; i < Names()->Num(); i++)\n"
"\t\t{\n"
"\t\t\tif (Names()->At(i))\n"
"\t\t\t{\n"
"\t\t\t\tif (!wcscmp(Names()->At(i)->Name, nameToFind))\n"
"\t\t\t\t{\n"
"\t\t\t\t\tnameCache.push_back(i);\n"
"\t\t\t\t\tFNameEntryId = i;\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t}\n"
"\t}\n"
"\n"
"\t~FName() {}\n"
"\n"
"public:\n"
"\tstatic TArray<FNameEntry*>* Names()\n"
"\t{\n"
"\t\tTArray<struct FNameEntry*>* GNamesArray = reinterpret_cast<TArray<struct FNameEntry*>*>(GNames);\n"
"\t\treturn GNamesArray;\n"
"\t}\n"
"\n"
"\tint32_t GetDisplayIndex() const\n"
"\t{\n"
"\t\treturn FNameEntryId;\n"
"\t}\n"
"\n"
"\tconst struct FNameEntry GetDisplayNameEntry() const\n"
"\t{\n"
"\t\tif (IsValid())\n"
"\t\t{\n"
"\t\t\treturn *Names()->At(FNameEntryId);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tstruct FNameEntry* GetEntry()\n"
"\t{\n"
"\t\tif (IsValid())\n"
"\t\t{\n"
"\t\t\treturn Names()->At(FNameEntryId);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tint32_t GetNumber() const\n"
"\t{\n"
"\t\treturn InstanceNumber;\n"
"\t}\n"
"\n"
"\tvoid SetNumber(int32_t newNumber)\n"
"\t{\n"
"\t\tInstanceNumber = newNumber;\n"
"\t}\n"
"\n"
"\tstd::string ToString() const\n"
"\t{\n"
"\t\tif (IsValid())\n"
"\t\t{\n"
"\t\t\tstd::wstring ws(GetDisplayNameEntry().Name);\n"
"\t\t\tstd::string str(ws.begin(), ws.end());\n"
"\t\t\treturn str;\n"
"\t\t}\n"
"\n"
"\t\treturn std::string(\"UnknownName\");\n"
"\t}\n"
"\n"
"\tbool IsValid() const\n"
"\t{\n"
"\t\tif (FNameEntryId > Names()->Num() || !Names()->At(FNameEntryId))\n"
"\t\t{\n"
"\t\t\treturn false;\n"
"\t\t}\n"
"\n"
"\t\treturn true;\n"
"\t}\n"
"\n"
"\tFName operator=(const FName& other)\n"
"\t{\n"
"\t\tFNameEntryId = other.FNameEntryId;\n"
"\t\tInstanceNumber = other.InstanceNumber;\n"
"\t\treturn *this;\n"
"\t}\n"
"\n"
"\tbool operator==(const FName& other) const\n"
"\t{\n"
"\t\treturn (FNameEntryId == other.FNameEntryId);\n"
"\t}\n"
"};\n";

std::string FScriptDelegate_Struct =
"struct FScriptDelegate\n"
"{\n"
"\tUObject*\t\t\tObject;\t\t\t\t\t\t\t\t\t// 0x0000 (0x08)\n"
"\tuint8_t\t\t\t\tUnknownData00[0x10];\t\t\t\t\t// 0x0008 (0x10)\n"
"};\n";

std::string FPointer_Struct =
"struct FPointer\n"
"{\n"
"\tuintptr_t Dummy;\n"
"};\n";

std::string FQWord_Struct =
"struct FQWord\n"
"{\n"
"\tint A;\n"
"\tint B;\n"
"};\n";

std::string FString_Struct =
"struct FString\n"
"{\n"
"public:\n"
"\tusing ElementType = const wchar_t;\n"
"\tusing ElementPointer = ElementType*;\n"
"\n"
"private:\n"
"\tElementPointer ArrayData;\n"
"\tint32_t ArrayCount;\n"
"\tint32_t ArrayMax;\n"
"\n"
"public:\n"
"\tFString()\n"
"\t{\n"
"\t\tArrayData = nullptr;\n"
"\t\tArrayCount = 0;\n"
"\t\tArrayMax = 0;\n"
"\t}\n"
"\n"
"\tFString(ElementPointer other)\n"
"\t{\n"
"\t\tArrayData = nullptr;\n"
"\t\tArrayCount = 0;\n"
"\t\tArrayMax = 0;\n"
"\n"
"\t\tArrayMax = ArrayCount = *other ? (wcslen(other) + 1) : 0;\n"
"\n"
"\t\tif (ArrayCount > 0)\n"
"\t\t{\n"
"\t\t\tArrayData = other;\n"
"\t\t}\n"
"\t}\n"
"\n"
"\t~FString() {}\n"
"\n"
"public:\n"
"\tstd::string ToString() const\n"
"\t{\n"
"\t\tif (IsValid())\n"
"\t\t{\n"
"\t\t\tstd::wstring wideStr(ArrayData);\n"
"\t\t\tstd::string str(wideStr.begin(), wideStr.end());\n"
"\t\t\treturn str;\n"
"\t\t}\n"
"\n"
"\t\treturn std::string(\"null\");\n"
"\t}\n"
"\n"
"\tbool IsValid() const\n"
"\t{\n"
"\t\tif (ArrayData)\n"
"\t\t{\n"
"\t\t\treturn true;\n"
"\t\t}\n"
"\n"
"\t\treturn false;\n"
"\t}\n"
"\n"
"\tFString operator=(ElementPointer other)\n"
"\t{\n"
"\t\tif (ArrayData != other)\n"
"\t\t{\n"
"\t\t\tArrayMax = ArrayCount = *other ? (wcslen(other) + 1) : 0;\n"
"\n"
"\t\t\tif (ArrayCount > 0)\n"
"\t\t\t{\n"
"\t\t\t\tArrayData = other;\n"
"\t\t\t}\n"
"\t\t}\n"
"\n"
"\t\treturn *this;\n"
"\t}\n"
"\n"
"\tbool operator==(const FString& other)\n"
"\t{\n"
"\t\treturn (!wcscmp(ArrayData, other.ArrayData));\n"
"\t}\n"
"\n"
"\tbool operator!=(const FString& other)\n"
"\t{\n"
"\t\treturn (wcscmp(ArrayData, other.ArrayData));\n"
"\t}\n"
"};\n";

std::string UField_Fields =
"\tclass UField*\t\tNext;\t\t\t\t\t\t\t\t\t// 0x0060 (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tUnknownData00[0x8];\t\t\t\t\t\t// 0x0068 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UEnum_Fields =
"\tTArray<FName>\t\tNames;\t\t\t\t\t\t\t\t\t// 0x0070 (0x0C) NOT AUTO-GENERATED PROPERTY\n";

std::string UConst_Fields =
"\tstruct FString\t\tValue;\t\t\t\t\t\t\t\t\t// 0x0070 (0x10) NOT AUTO-GENERATED PROPERTY\n";

std::string UProperty_Fields =
"\tunsigned long\t\tArrayDim;\t\t\t\t\t\t\t\t// 0x0070 (0x04) NOT AUTO-GENERATED PROPERTY\n"
"\tunsigned long\t\tElementSize;\t\t\t\t\t\t\t// 0x0074 (0x04) NOT AUTO-GENERATED PROPERTY\n"
"\tint64_t\t\t\t\tPropertyFlags;\t\t\t\t\t\t\t// 0x0078 (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tUnknownData[0x18];\t\t\t\t\t\t// 0x0080 (0x18) NOT AUTO-GENERATED PROPERTY\n"
"\tunsigned long\t\tOffset;\t\t\t\t\t\t\t\t\t// 0x0098 (0x04) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tUnknownData01[0x2C];\t\t\t\t\t// 0x009C (0x30) NOT AUTO-GENERATED PROPERTY\n";

std::string UStruct_Fields =
"\tuint8_t\t\t\t\tUnknownData00[0x10];\t\t\t\t\t// 0x0070 (0x10) NOT AUTO-GENERATED PROPERTY\n"
"\tclass UField*\t\tSuperField;\t\t\t\t\t\t\t\t// 0x0080 (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tclass UField*\t\tChildren;\t\t\t\t\t\t\t\t// 0x0088 (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tunsigned long\t\tPropertySize;\t\t\t\t\t\t\t// 0x0090 (0x04) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tUnknownData01[0x9C];\t\t\t\t\t// 0x0094 (0x9C) NOT AUTO-GENERATED PROPERTY\n";

std::string UFunction_Fields =
"\tint64_t\t\t\t\tFunctionFlags;\t\t\t\t\t\t\t// 0x0130 (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tuint16_t\t\t\tiNative;\t\t\t\t\t\t\t\t// 0x0138 (0x02) NOT AUTO-GENERATED PROPERTY\n"
"\tuint16_t\t\t\tRepOffset;\t\t\t\t\t\t\t\t// 0x013A (0x02) NOT AUTO-GENERATED PROPERTY\n"
"\tstruct FName\t\tFriendlyName;\t\t\t\t\t\t\t// 0x013C (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tOperatorPrecedence;\t\t\t\t\t\t// 0x0144 (0x01) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tNumParms;\t\t\t\t\t\t\t\t// 0x0145 (0x01) NOT AUTO-GENERATED PROPERTY\n"
"\tuint16_t\t\t\tParmsSize;\t\t\t\t\t\t\t\t// 0x0146 (0x02) NOT AUTO-GENERATED PROPERTY\n"
"\tunsigned long\t\tReturnValueOffset;\t\t\t\t\t\t// 0x0148 (0x04) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tUnknownData00[0xC];\t\t\t\t\t\t// 0x014C (0x12) NOT AUTO-GENERATED PROPERTY\n"
"\tFPointer\t\t\tFunc;\t\t\t\t\t\t\t\t\t// 0x0158 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UStructProperty_Fields =
"\tclass UStruct*\t\tStruct;\t\t\t\t\t\t\t\t\t// 0x00C8 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UObjectProperty_Fields =
"\tclass UClass*\t\tPropertyClass;\t\t\t\t\t\t\t// 0x00C8 (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tuint8_t\t\t\t\tUnknownData00[0x08];\t\t\t\t\t// 0x00D0 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UMapProperty_Fields =
"\tclass UProperty*\tKey;\t\t\t\t\t\t\t\t\t// 0x00C8 (0x08) NOT AUTO-GENERATED PROPERTY\n"
"\tclass UProperty*\tValue;\t\t\t\t\t\t\t\t\t// 0x00D0 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UInterfaceProperty_Fields =
"\tclass UClass*\t\tInterfaceClass;\t\t\t\t\t\t\t// 0x00C8 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UByteProperty_Fields =
"\tclass UEnum*\t\tEnum;\t\t\t\t\t\t\t\t\t// 0x00C8 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UBoolProperty_Fields =
"\tuint64_t\t\t\tBitMask;\t\t\t\t\t\t\t\t// 0x00C8 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UArrayProperty_Fields =
"\tclass UProperty*\tInner;\t\t\t\t\t\t\t\t\t// 0x00C8 (0x08) NOT AUTO-GENERATED PROPERTY\n";

std::string UObject_FunctionDescriptions =
"\tstatic TArray<class UObject*>* GObjObjects();\n"
"\n"
"\tstd::string GetName();\n"
"\tstd::string GetNameCPP();\n"
"\tstd::string GetFullName();\n"
"\tUObject* GetPackageObj();\n"
"\n"
"\ttemplate<typename T> static T* FindObject(const std::string& objectFullName);\n"
"\ttemplate<typename T> static uint32_t CountObject(const std::string& objectName);\n"
"\tstatic UClass* FindClass(const std::string& classFullName);\n"
"\n"
"\tbool IsA(class UClass* uClass);\n"
"\tbool IsA(int objInternalInteger);\n\n";

std::string UObject_Functions =
"TArray<class UObject*>* UObject::GObjObjects()\n"
"{\n"
"\tTArray<class UObject*>* objectArray = reinterpret_cast<TArray<class UObject*>*>(GObjects);\n"
"\treturn objectArray;\n"
"}\n"
"\n"
"std::string UObject::GetName()\n"
"{\n"
"\treturn this->Name.ToString();\n"
"}\n"
"\n"
"std::string UObject::GetNameCPP()\n"
"{\n"
"\tstd::string nameCPP;\n"
"\n"
"\tif (this->IsA(UClass::StaticClass()))\n"
"\t{\n"
"\t\tUClass* uClass = reinterpret_cast<UClass*>(this);\n"
"\n"
"\t\twhile (uClass)\n"
"\t\t{\n"
"\t\t\tstd::string className = uClass->GetName();\n"
"\n"
"\t\t\tif (className == \"Actor\")\n"
"\t\t\t{\n"
"\t\t\t\tnameCPP += \"A\";\n"
"\t\t\t\tbreak;\n"
"\t\t\t}\n"
"\t\t\telse if (className == \"Object\")\n"
"\t\t\t{\n"
"\t\t\t\tnameCPP += \"U\";\n"
"\t\t\t\tbreak;\n"
"\t\t\t}\n"
"\n"
"\t\t\tuClass = reinterpret_cast<UClass*>(uClass->SuperField);\n"
"\t\t}\n"
"\t}\n"
"\telse\n"
"\t{\n"
"\t\tnameCPP += \"F\";\n"
"\t}\n"
"\n"
"\tnameCPP += this->GetName();\n"
"\n"
"\treturn nameCPP;\n"
"}\n"
"\n"
"std::string UObject::GetFullName()\n"
"{\n"
"\tif (this->Class && this->Outer)\n"
"\t{\n"
"\t\tstd::string fullName = this->GetName();\n"
"\n"
"\t\tfor (UObject* uOuter = this->Outer; uOuter; uOuter = uOuter->Outer)\n"
"\t\t{\n"
"\t\t\tfullName = uOuter->GetName() + \".\" + fullName;\n"
"\t\t}\n"
"\n"
"\t\tfullName = this->Class->GetName() + \" \" + fullName;\n"
"\n"
"\t\treturn fullName;\n"
"\t}\n"
"\n"
"\treturn \"null\";\n"
"}\n"
"\n"
"UObject* UObject::GetPackageObj()\n"
"{\n"
"\tUObject* uPackage = nullptr;\n"
"\n"
"\tfor (UObject* uOuter = this->Outer; uOuter; uOuter = uOuter->Outer)\n"
"\t{\n"
"\t\tuPackage = uOuter;\n"
"\t}\n"
"\n"
"\treturn uPackage;\n"
"}\n"
"\n"
"template<typename T>\n"
"T* UObject::FindObject(const std::string& objectFullName)\n"
"{\n"
"\tfor (UObject* uObject : *UObject::GObjObjects())\n"
"\t{\n"
"\t\tif (uObject && uObject->IsA(T::StaticClass()))\n"
"\t\t{\n"
"\t\t\tif (uObject->GetFullName() == objectFullName)\n"
"\t\t\t{\n"
"\t\t\t\treturn reinterpret_cast<T*>(uObject);\n"
"\t\t\t}\n"
"\t\t}\n"
"\t}\n"
"\n"
"\treturn nullptr;\n"
"}\n"
"\n"
"template<typename T>\n"
"static uint32_t UObject::CountObject(const std::string& objectName)\n"
"{\n"
"\tstatic std::map<std::string, int> countCache;\n"
"\n"
"\tif (countCache.find(objectName) == countCache.end())\n"
"\t{\n"
"\t\tcountCache[objectName] = 0;\n"
"\n"
"\t\tfor (UObject* uObject : *UObject::GObjObjects())\n"
"\t\t{\n"
"\t\t\tif (uObject && uObject->IsA(T::StaticClass()))\n"
"\t\t\t{\n"
"\t\t\t\tif (uObject->GetName() == objectName)\n"
"\t\t\t\t{\n"
"\t\t\t\t\tcountCache[uObject->GetName()]++;\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t}\n"
"\t}\n"
"\n"
"\treturn countCache[objectName];\n"
"}\n"
"\n"
"UClass* UObject::FindClass(const std::string& classFullName)\n"
"{\n"
"\tstatic bool initialized = false;\n"
"\tstatic std::map<std::string, UClass*> foundClasses{};\n"
"\n"
"\tif (!initialized)\n"
"\t{\n"
"\t\tfor (UObject* uObject : *UObject::GObjObjects())\n"
"\t\t{\n"
"\t\t\tif (uObject)\n"
"\t\t\t{\n"
"\t\t\t\tstd::string objectFullName = uObject->GetFullName();\n"
"\n"
"\t\t\t\tif (objectFullName.find(\"Class\") == 0)\n"
"\t\t\t\t{\n"
"\t\t\t\t\tfoundClasses[objectFullName] = reinterpret_cast<UClass*>(uObject);\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t}\n"
"\n"
"\t\tinitialized = true;\n"
"\t}\n"
"\n"
"\tif (foundClasses.find(classFullName) != foundClasses.end())\n"
"\t{\n"
"\t\treturn foundClasses[classFullName];\n"
"\t}\n"
"\n"
"\treturn nullptr;\n"
"}\n"
"\n"
"bool UObject::IsA(UClass* uClass)\n"
"{\n"
"\tfor (UClass* uSuperClass = this->Class; uSuperClass; uSuperClass = reinterpret_cast<UClass*>(uSuperClass->SuperField))\n"
"\t{\n"
"\t\tif (uSuperClass == uClass)\n"
"\t\t{\n"
"\t\t\treturn true;\n"
"\t\t}\n"
"\t}\n"
"\n"
"\treturn false;\n"
"}\n"
"\n"
"bool UObject::IsA(int objInternalInteger)\n"
"{\n"
"\tUClass* uClass = UObject::GObjObjects()->At(objInternalInteger)->Class;\n"
"\n"
"\tif (uClass)\n"
"\t{\n"
"\t\treturn this->IsA(uClass);\n"
"\t}\n"
"\n"
"\treturn false;\n"
"}\n\n";

std::string UFunction_Functions =
"UFunction* UFunction::FindFunction(const std::string& functionFullName)\n"
"{\n"
"\tstatic bool initialized = false;\n"
"\tstatic std::map<std::string, UFunction*> foundFunctions{};\n"
"\n"
"\tif (!initialized)\n"
"\t{\n"
"\t\tfor (UObject* uObject : *UObject::GObjObjects())\n"
"\t\t{\n"
"\t\t\tif (uObject)\n"
"\t\t\t{\n"
"\t\t\t\tstd::string objectFullName = uObject->GetFullName();\n"
"\n"
"\t\t\t\tif (objectFullName.find(\"Function\") == 0)\n"
"\t\t\t\t{\n"
"\t\t\t\t\tfoundFunctions[objectFullName] = reinterpret_cast<UFunction*>(uObject);\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t}\n"
"\n"
"\t\tinitialized = true;\n"
"\t}\n"
"\n"
"\tif (foundFunctions.find(functionFullName) != foundFunctions.end())\n"
"\t{\n"
"\t\treturn foundFunctions[functionFullName];\n"
"\t}\n"
"\n"
"\treturn nullptr;\n"
"}\n\n";